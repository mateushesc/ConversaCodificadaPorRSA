import math

p = 2213123628354983897115998625336689827687390117113653005630630027169371604551404890654628122259001177759
q = 1769642401523647528710653959246630370406623814212235550117706938766204256846730841459606269250539310923

n = p * q

def totienteDeEuler(p, q):
    return (p - 1) * (q - 1)
    
def gerarE(œïn):
    e = 65537
    
    if math.gcd(e, œïn) == 1:
        return e
    
    for e in range(3, œïn, 2):
        if math.gcd(e, œïn) ==1:
            return e
    
    raise ValueError("Falha ao achar valor v√°lido para E")

def gerarD(œïn, e):
    return pow(e, -1, œïn)

def criptografia(mensagem, e, n):
    
    mensagemBytes = mensagem.encode('utf-8')
    mensagemInt = int.from_bytes(mensagemBytes, byteorder='big')
    
    return pow(mensagemInt, e, n)

def descriptografia(mensagemCriptografada, d, n):
    
    mensagemDescriptografada = pow(mensagemCriptografada, d, n)
    
    mensagemBytes = mensagemDescriptografada.to_bytes((mensagemDescriptografada.bit_length() + 7) // 8, byteorder='big')
    
    return mensagemBytes.decode('utf-8')

# Separa√ß√£o em blocos e reconstru√ß√£o de blocos
# blocoSize = 21

def separa√ß√£oBlocos(string, blocoSize):
    return [string[i:i + blocoSize] for i in range(0, len(string), blocoSize)]

def reconstru√ß√£oBlocos(blocos):
    return ''.join(blocos)
    
# Chaves p√∫blicas (n, e)
# Chaves privadas (p, q, d)
    
def RSACriptografia(mensagem, e, n):
    
    blocos = separa√ß√£oBlocos(mensagem, 21)
    
    blocosCriptografados = []
    
    for bloco in blocos:
        blocosCriptografados.append(criptografia(bloco, e, n))
        
    return blocosCriptografados

def RSADescriptografia(blocosCriptografados, p, q, d):
    
    n = p * q
    
    blocosDescriptografados = []
    
    for bloco in blocosCriptografados:
       blocosDescriptografados.append(descriptografia(bloco, d, n))
        
    return reconstru√ß√£oBlocos(blocosDescriptografados)

# Chamadas para teste

œïn = totienteDeEuler(p, q)
e = gerarE(œïn)
#print("E √© igual:", e)
d = gerarD(œïn, e)
#print("D √© igual:", d)

mensagem = """
Era uma vez, em um mundo digital, um estudante chamado Mateus que adorava desafios de criptografia. Ele estudava algoritmos como AES, RSA, Diffie-Hellman e ficava fascinado com a ideia de proteger mensagens secretas contra bisbilhoteiros curiosos. 

Em uma noite chuvosa, enquanto o trov√£o ecoava pela cidade, Mateus decidiu implementar sua pr√≥pria vers√£o do algoritmo RSA. "Ser√° que consigo dividir mensagens em blocos, criptografar e depois recuperar tudo perfeitamente?", pensou. 

Ele escreveu fun√ß√£o ap√≥s fun√ß√£o ‚Äî para gerar primos gigantes, calcular o totiente de Euler, encontrar o expoente p√∫blico 'e', o expoente privado 'd', e claro, converter mensagens entre strings, inteiros e de volta. Tudo parecia promissor.

Mas ent√£o... üí• Um erro! Um simples caractere fora do padr√£o, um '√£', fez tudo falhar. "Ah, os bytes malditos do UTF-8!", gritou ele com o teclado na m√£o e os olhos cheios de determina√ß√£o. 

Sem desistir, ajustou o tamanho dos blocos, corrigiu a convers√£o dos inteiros e adicionou verifica√ß√µes para evitar que os n√∫meros ultrapassassem 'n'. E finalmente, como num passe de m√°gica, a mensagem secreta voltou ilesa, como se nunca tivesse sido embaralhada por f√≥rmulas matem√°ticas complexas.

Essa √© a hist√≥ria de como a persist√™ncia codificou o sucesso ‚Äî com matem√°tica, coragem e um pouco de caf√©.
"""

blocosCriptografados = RSACriptografia(mensagem, e, n)

#print(blocosCriptografados)

mensagemDescriptografada = RSADescriptografia(blocosCriptografados, p, q, d)

print(mensagemDescriptografada)

